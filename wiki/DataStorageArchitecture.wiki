#summary outdated. explains how the data are stored and accessed

= Introduction =

This page explains the way the data are stored and retrieved.

The general idea is that there is a class which holds all the Tracking information in one place. This class is called *DataStorage*. The tracking data themselves are stored in special classes that express their type (DataWay is a way!). These Data can be serialised (written on the devices background memory) using a ContentProvider.

= Details =

== Datastructure ==
We have following Datastructure:

 * A *Track* consists of Media, Ways, Areas, Nodes (POIs)
 * A *Way* cosists of Media, Nodes, Metadata
 * An *Area* cosists of Media, Nodes, Metadata
 * A *Node* consists of Media, Metadata
 * *Media* refer to a media written on the devices memory (path)

At the top level we have possibly several Tracks.

== Operations ==

There are 5 basic operations:

 * A Track, Way, Area, Node, Medium can be *deleted*
 * A Track, Way, Area, Node, Medium can be *added*
 * The Metadata of Ways, Areas, Nodes and maybe Media can be *changed*
 * A Way, Area, Node can be *serialised* (Media are already serialised)
 * A Way, Area, Node, Medium can be *deserialised*

Deleting a Node of a Way implies that the Node itself is deleted, too.
Also a Medium is assigned to exactly one datum. If the Medium is deassigned from an object the Medium on the background memory is deleted as well.

*How to* do execute the operations:
 * If we want to *delete* an object _A_ which is contained in _B_ (e.g. a Node _a_ of a Way _b_) we call the deleteXxx()-method (e.g. deleteNode() on the parent Way-object) on the parent object _B_. If we call only the delete()-method of A, then A will be erased on the devices memory but not in the working memory and A will be reinserted the next time the data are serialised.
 *  If we want to *add* a new object, we use the addXxx()-Method on a parent object. The new object is created in the working memory and with the next serialisation it will saved to the devices memory.
 * If we want to *change* an object like adding or changing tags we simply get the object and use its methods.
 * For *serialisation* and *deserialisation*, call the (de-)serialise()-method on an object.

== Architecture ==

The Data themselves are stored in the working memory using the DataXxx-objects. The GUI-activities and the GPS-logging-service need to access these Data. Since the GPS-logging-service should always be running in the background and the activities can access it the data should be held by the GPS-logging-service. There is a class DataStorage which holds these Data and performs operations on the data. The Data can serialise themselves and the DataStorage can cause a serialisation of all data.
Serialisation is done with the help of a ContentProvider. No class other than the data themselves need to be aware of the ContentProvider as all other components simple use serialise() and deserialise().