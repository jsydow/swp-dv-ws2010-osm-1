#summary The design of core.data
#labels Phase-Design

= Introduction =

Core.data contains the data model of the tracking application. All tracked data are stored here an can be retrieved, changed, saved to SD-card and loaded from SD-card.

= Details =

First of all read the wiki article [Data Data].

== Data model ==

The data model is a like a tree:
  * !DataStorage contains:
   * !DataTrack contains:
    * !DataNode (POIs) contains:
     * tags
     * !DataMedia
    * !DataPointsList (ways and areas) contains:
     * !DataMedia
     * !DataNode contains:
      * tags
      * !DataMedia
     * tags
    * !DataMedia

== Data Operations ==

There are 4 operations that can be done on a datum:
  * create: create a new datum and append to parent object
  * delete: delete the datum (operation is done on the parent object)
  * update: update data of the datum
  * query: if the parent object has a list of data, query (the parent) to find the specific datum.



==  ==
!DataStorage is the class that has all other data in it. It is therefore like a root-object. The whole data model is like a tree. Since all other parts of the application should only work on one "database" of the tracking data this class is modeled as Singleton. There is at most one instance of !DataStorage.

The data in a !DataStorage object are tracks. Tracks are like tracking sessions. They contain all data that were recorded and edited in one (or multiple) application usage sessions.

Folling operations are implemented:
  
  * load tracks
  * get loaded tracks
  * delete tracks
  * create new tracks
  * get a list of all tracks on the SD-card

There is a special reference to a loaded track called currentWay. The current way is the way that is currently edited. There is at most one current way.

== !DataMediaHolder ==