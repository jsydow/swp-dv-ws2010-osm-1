#summary Map features in an XML file.
#labels Phase-Design

A tarball containing XML files for several languages (now with more data) is available at http://userpage.fu-berlin.de/hdinh/xml.tar.bz2

= XML schema =

{{{
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema targetNamespace="http://code.google.com/p/swp-dv-ws2010-osm-1/OSM_Tags" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://code.google.com/p/swp-dv-ws2010-osm-1/OSM_Tags">
	<!--  Element: key -->
	<xs:element name="key">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="value" maxOccurs="unbounded"/>			
			</xs:sequence>
			<xs:attribute name="v" type="xs:string" use="required" />
		</xs:complexType>
	</xs:element>
				
	<!--  Element: value -->
	<xs:element name="value">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="description" type="xs:string" minOccurs="0" />
				<xs:element name="uri" type="xs:string" minOccurs="0" />
				<xs:element name="useful" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="v" type="xs:string" use="required" />
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="isArea" type="xs:boolean" default="false" />
			<xs:attribute name="isNode" type="xs:boolean" default="false" />
			<xs:attribute name="isWay" type="xs:boolean" default="false" />
			<xs:attribute name="type" type="xs:string" use="required" />
			<xs:attribute name="v" type="xs:string" use="required" />
		</xs:complexType>
	</xs:element>
	
	<!-- Root element -->
	<xs:element name="map_features">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="key" maxOccurs="unbounded" />
			</xs:sequence>
			<xs:attribute name="lang" type="xs:string" default="en" />
		</xs:complexType>
	</xs:element>
</xs:schema>
}}}

= Code =

No Java, because... well, just because.

{{{
module OsmMapFeatures
    require 'net/http'

    @tags = Hash.new

    def get_page(uri)
        Net::HTTP.get(URI.parse(uri))
    end

    # Retrieves keys and values from the Map_Features wiki entry at OSM's.
    def parse_keys_and_values()
        f = get_page('http://wiki.openstreetmap.org/wiki/Map_Features')
        tags = f.scan(/<tr>\s+<td>(.*?)<\/td><td>(.*?)<\/td>/m)

        tags.each do |tag|
            key = tag[0].gsub(/<.*?>/, '').strip
            value = tag[1].gsub(/<.*?>/, '').strip
            value_details = tag[1].strip

            @tags[key] ||= Hash.new
            @tags[key][value] = value_details
        end
    end

    # Dump what we have as an XML file.
    def p_xml
        puts "<map_features>"

        @tags.keys.each do |key|
            puts "  <key v=\"#{key}\">"

            @tags[key].keys.each do |value|
                value.split('/').each do |v|
                    puts "    <value v=\"#{v.strip}\">"
                    if (not @tags[key][value].match(/class="new"/))
                        href = @tags[key][value].scan(/href="(.*?)"/)
                        if (href)
                            href = href.to_s.strip

                            # Try and get some keys that are useful for this given key value pair.
                            useful_page = get_page("http://wiki.openstreetmap.org#{href}")
                            useful_tags = useful_page.scan(/<dl><dt>Useful combination(.*?)<dl><dt>/).to_s.scan(/<li>(.*?)<\/li>/m)
                            useful_tags.each do |useful_tag|
                                useful_tag = useful_tag.to_s.gsub(/<.*?>/m, '').gsub(/=.*/, '').gsub(/Key:/i, '').strip
                                puts "      <useful v=\"#{useful_tag}\" />" unless (useful_tag == "" or useful_tag.match(/ /))
                            end
                        end
                    end
                    puts "    </value>"
                end
            end
            
            puts "  </key>"
        end

        puts "</map_features>"
    end
end
}}}

= Usage =

{{{
include OsmMapFeatures

OsmMapFeatures.parse_keys_and_values
OsmMapFeatures.p_xml
}}}